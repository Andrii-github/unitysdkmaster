using LicenseSpring.Unity.Components;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;


namespace LicenseSpring.Unity.Plugins
{
    /// <summary>
    /// This ManagerBehaviour is the heart of all operation within license spring connection with unity.
    /// Do not use it manually, it will generated by LicenseSpring.
    /// </summary>
    [DefaultExecutionOrder(-100),
        ExecuteAlways]
    public class LicenseSpringUnityManager : MonoBehaviour
    {
        private static LicenseSpringUnityManager INSTANCE;

        public static LicenseSpringUnityManager Instance
        {
            get
            {
                //this made sense only in game, in editor mode this instance is maintained by license watcher.
                if (INSTANCE == null)
                    INSTANCE = new GameObject(LicenseSpringWatcher.WATCH_NAME)
                        .AddComponent< LicenseSpringUnityManager>();

                return INSTANCE;
            }
        }

        /// <summary>
        /// all of the used license behaviour in the scenes.
        /// </summary>
        public ILicenseBehaviour[] LicenseBehaviours;

        /// <summary>
        /// Local license manager.
        /// </summary>
        public LicenseManager AppLicenseManager { get; private set; }

        private License                     _currentLicense;
        private LicenseSpringNotification   _licenseSpringNotification;

        private LicenseSpringNotification InitNotificationSystem()
        {
            //establish notification system for license manager
            var licenseSpringNotification = GameObject.FindObjectOfType<LicenseSpringNotification>();
            if (licenseSpringNotification == null)
                licenseSpringNotification = Camera.main.gameObject.AddComponent<LicenseSpringNotification>();

            //set initial status
            licenseSpringNotification.SetStatus(LicenseStatus.Unknown);
            return licenseSpringNotification;
        }

        private void Awake()
        {
            if (!Application.isEditor && AppLicenseManager == null)
                InitLicenseManager();

            _licenseSpringNotification = InitNotificationSystem();

            InitLicenseManager();

            SeekAllLicenseBehaviour();

            if (Application.isPlaying)
                DontDestroyOnLoad(this);

            if (INSTANCE == null)
                INSTANCE = this;
        }

        private void Start()
        {
            var currentInstalledLicense = CheckCurrentLicense();
            Notify(currentInstalledLicense);
        }

        /// <summary>
        /// get all deployed license behaviour.
        /// </summary>
        private void SeekAllLicenseBehaviour()
        {
            LicenseBehaviours = GameObject.FindObjectsOfType<LicenseBehaviour>();
        }

        /// <summary>
        /// Routine of checking current installed license.
        /// </summary>
        /// <returns></returns>
        public License CheckCurrentLicense()
        {
            return (License)AppLicenseManager?.CurrentLicense();
        }

        /// <summary>
        /// initialize license manager, reading deployed license or register a new one, 
        /// it show trial period and expiration date
        /// </summary>
        public void InitLicenseManager()
        {
            AppLicenseManager =(LicenseManager)LicenseManager.GetInstance();

            var licenseFilePath = Path.Combine(Application.persistentDataPath, "License","license.bin");
            LicenseSpringExtendedOptions licenseSpringExtendedOptions = new LicenseSpringExtendedOptions
            {
                HardwareID = SystemInfo.deviceUniqueIdentifier,
                EnableLogging = false,
                CollectHostNameAndLocalIP = true,
                LicenseFilePath = licenseFilePath
            };

            //HACK : if there is no baked credential read at files.
            if (Helpers.LicenseApiConfigurationHelper.CheckLocalConfiguration())
            {
                var licenseLocalKey = Helpers.LicenseApiConfigurationHelper.ReadApiFileKey();

                var licenseConfig = new LicenseSpringConfiguration(licenseLocalKey.ApiKey,
                    licenseLocalKey.SharedKey,
                    licenseLocalKey.ProductCode,
                    licenseLocalKey.ApplicationName,
                    licenseLocalKey.ApplicationVersion,
                    licenseSpringExtendedOptions);

                AppLicenseManager.Initialize(licenseConfig);
            }
            else
            {
                Notify(null);
                if(!Application.isPlaying)
                    throw new UnityEngine.UnityException("No Api Configuration detected, Contact your asset Developer");
                else
                {
                    throw new UnityEngine.UnityException("UnAuthorized License Manager detected");
                }
            }
            
        }


        public void Notify(License licenseData)
        {
            _licenseSpringNotification = GameObject.FindObjectOfType< LicenseSpringNotification>();
            if(_licenseSpringNotification == null)
            {
                _licenseSpringNotification = Camera.main.gameObject.AddComponent<LicenseSpringNotification>();
            }

            if (licenseData == null)
                _licenseSpringNotification.SetStatus( LicenseStatus.Unknown);
            else
                _licenseSpringNotification.SetStatus(licenseData.Status());
        }

    }
}